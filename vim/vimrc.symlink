"NeoBundle Scripts-----------------------------
if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Add or remove your Bundles here:
NeoBundle 'embear/vim-localvimrc'
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'Shougo/unite.vim'
"NeoBundle 'scrooloose/syntastic'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'idanarye/vim-merginal'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'editorconfig/editorconfig-vim'
"NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'tpope/vim-rvm'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-bundler'
NeoBundle 'tpope/vim-projectionist'
NeoBundle 'cespare/vim-sbd'
NeoBundle 'mustache/vim-mustache-handlebars'
NeoBundle 'jistr/vim-nerdtree-tabs'
NeoBundle 'serby/vim-historic'

NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'janko-m/vim-test'
NeoBundle 'vim-ruby/vim-ruby'
if executable('make') || executable('gmake')
  NeoBundle 'Shougo/vimproc.vim', {
\   'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\   },
\ }
endif

" Required:
call neobundle#end()

" Filetypes:
filetype on
filetype indent on
filetype plugin on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------


" ADDS
let mapleader=","
" Paste from system clipboard (if terminal supports it)
if has('clipboard')
  nnoremap <Leader>v :set paste<CR>"*p :set nopaste<CR>
  vnoremap <Leader>c "*y
endif
nnoremap <Leader>s :w!<CR>
"nnoremap <Leader>sq :wq!<CR>
nnoremap <Leader>q :qa<CR>
nnoremap <Leader>Q :qa!<CR>
" Indent code
nnoremap <Tab> >>
nnoremap <S-Tab> <<i
inoremap <S-Tab> <Esc><<i
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
" Ruby
nnoremap <Leader>rr :Rake<Space>
nnoremap <Leader>rrdm :Rake db:migrate<CR>
nnoremap <Leader>rrdc :Rake db:create<CR>
nnoremap <Leader>rrdd :Rake db:drop<CR>
nnoremap <Leader>rrds :Rake db:setup<CR>
nnoremap <Leader>rbi :Bundle install<CR>
nnoremap <Leader>rbu :Bundle update<CR>
nnoremap <Leader>rbo :Bopen<Space>
" Marked
nnoremap <leader>b :silent !open -a Marked\ 2.app '%:p'<CR>:redraw!<CR>

" --------------------------
" Plugins config
" --------------------------
" vim-airline
let g:airline_theme="powerlineish"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#show_tab_nr = 0
if executable('rvm')
  let g:airline_section_x = '%{airline#util#wrap(airline#parts#filetype(),0)} %{airline#util#wrap(rvm#statusline(),0)}'
endif

" Unite Fuzzy find files
nnoremap <silent> <leader>p <C-W>l:Unite -auto-resize file_rec/async<cr>
"nnoremap <silent> <leader>/ :Unite grep:.<cr>

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
let g:unite_split_rule = 'botright'
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
let g:unite_enable_start_insert = 1
let g:unite_source_hisory_yank_enable = 1
if executable('ack')
  let g:unite_source_grep_command = 'ack'
  let g:unite_source_grep_default_opts ='-i --smart-case --nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_rec_async_command = ['ack', '-f', '--nofilter']
endif

call unite#custom#source('file_rec/async,file_rec/git', 'ignore_globs', [])
"nnoremap <C-P> :Unite file_mru file_rec/async file<CR>
"inoremap <C-P> <Esc>:Unite file_mru file_rec/async file<CR>
"hi link UniteCursorLine CursorLine
"hi UniteCursorLine cterm=NONE ctermbg=darkblue ctermfg=white guibg=darkblue guifg=white

"if executable('ack')
  "let g:unite_source_grep_command = 'ack'
  "let g:unite_source_grep_default_opts =
    "\ '-i --smart-case --nogroup --nocolor'
  "let g:unite_source_grep_recursive_opt = ''
  "let g:unite_source_rec_async_command =
    "\ 'ack -f --nofilter --nogroup --nocolor'
"endif

"call unite#filters#matcher_default#use(['matcher_fuzzy'])

"call unite#custom#profile('default', 'context', {
"\   'marked_icon': 'âœ“',
"\   'start_insert': 1,
"\   'winheight': 10,
"\   'direction': 'botright',
"\   'cursor_line_highlight': 'UniteCursorLine'
"\ })

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_yaml_checkers = ['yamllint']
let g:syntastic_enable_highlighting = 0
highlight Search guibg=grey ctermbg=grey

" NERDTree
nnoremap <Leader>kb :NERDTreeTabsToggle<CR>
let NERDTreeShowHidden=1
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" NERDCommenter
nmap <Leader>/ <leader>c<space>
vmap <Leader>/ <leader>c<space>

" NEOComplete
"let g:acp_enableAtStartup = 0
"let g:neocomplete#enable_at_startup = 1
"let g:neocomplete#enable_smart_case = 1
"let g:neocomplete#sources#syntax#min_keyword_length = 3
"let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
"let g:neocomplete#max_list = 10
"let g:neocomplete#enable_auto_select = 1
"set complete-=i

" vim-localvimrc
let g:localvimrc_persistent = 1

" vim-fugitive and vim-merginal
nnoremap <silent> <Leader>gs :Gstatus<CR>
nnoremap <silent> <Leader>gb :Gblame<CR>
nnoremap <silent> <Leader>g/ :MerginalToggle<CR>
set statusline+=%{fugitive#statusline()}
"nnoremap <C-G><C-S> :Gstatus<CR>
"inoremap <C-G><C-S> <Esc>:Gstatus<CR>

" vim-rvm
set shell=sh

" vim-test
nmap <silent> <Leader>t :TestNearest<CR>
nmap <silent> <Leader><Leader>t :TestLast<CR>
nmap <silent> <Leader><Leader>T :TestSuite<CR>

" vim-historic
let g:historicBackupRepoLocation = "~/.vim/localhistory"

" projectionist
nmap <silent> <Leader>T :A<CR>

" multicursor
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-g>'
let g:multi_cursor_quit_key='<Esc>'

" --------------------------
" Keybindings
" --------------------------
nnoremap <Leader><Right>    <C-W>l:bnext<CR>
"inoremap <C-C><Right>     <Esc>:bnext<CR>
nnoremap <Leader><Left>     <C-W>l:bprevious<CR>
"inoremap <C-C><Left>     <Esc>:bprevious<CR>
"nnoremap <C-c><C-s>     :w<CR>
"inoremap <C-c><C-s>     <Esc>:w<CR>
"nnoremap <C-c><C-q>     :qa<CR>
"inoremap <C-c><C-q>    <Esc>:qa<CR>
nnoremap <Leader>w     :Sbd<CR>
nnoremap <Leader>x     :Sbdm<CR>
nnoremap <Leader>W     :bd<CR>
nnoremap <Leader>X     :bd!<CR>
nnoremap <Leader>aw     :bufdo Sbd<CR>
nnoremap <Leader>ax     :bufdo Sbdm<CR>
nnoremap <Leader>aW     :bufdo bd<CR>
nnoremap <Leader>aX     :bufdo bd!<CR>
"inoremap <C-c><C-w>     <Esc>:bd<CR>
nmap <Leader>j <C-W>j
nmap <Leader>k <C-W>k
nmap <Leader>h <C-W>h
nmap <Leader>l <C-W>l
"imap <C-j> <Esc><C-W>j
"imap <C-k> <Esc><C-W>k
"imap <C-h> <Esc><C-W>h
"imap <C-l> <Esc><C-W>l

" --------------------------
" Other options
" --------------------------
" Encoding
set encoding=utf-8
" Display statusbar
set laststatus=2
" Set colors to 256
set t_Co=256
" Show line numbers
set number
" Syntax highlighting
syntax on
" Tab width
set tabstop=4 shiftwidth=4 expandtab
" autocomplete vim commands
set wildmenu
" Cursor line
" set cursorline
" hi CursorLine cterm=underline
" Line Length limiter
" set Search results highlight
"hi Search cterm=NONE ctermbg=NONE guibg=NONE
set colorcolumn=120
hi ColorColumn ctermbg=darkgrey ctermfg=white guibg=darkgrey guifg=white
" Allow to switch buffer without saving
set hidden
" Trim trailing whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e
" Fix terminal
silent !stty -ixon > /dev/null 2>/dev/null
set lazyredraw
set ttyfast
" Make search better
set incsearch
set hlsearch
noremap <leader><space> :nohlsearch<CR>

set backspace=indent,eol,start

