"NeoBundle Scripts-----------------------------
if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Add or remove your Bundles here:
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'editorconfig/editorconfig-vim'
" NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'janx/vim-rubytest'
" NeoBundle 'skalnik/vim-vroom'
" NeoBundle 'tpope/vim-rvm'
"NeoBundle 'Shougo/vimproc.vim', {
"\ 'build' : {
"\     'windows' : 'tools\\update-dll-mingw',
"\     'cygwin' : 'make -f make_cygwin.mak',
"\     'mac' : 'make -f make_mac.mak',
"\     'linux' : 'make',
"\     'unix' : 'gmake',
"\    },
"\ }

" Required:
call neobundle#end()

" Required:
filetype plugin on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------

" --------------------------
" Plugins config
" --------------------------
" vim-airline
let g:airline_theme="powerlineish"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline_powerline_fonts = 1
"let g:airline#extensions#tabline#show_tab_nr = 0

" Unite
nnoremap <C-P> :Unite file_mru file_rec/async file<CR>
inoremap <C-P> <Esc>:Unite file_mru file_rec/async file<CR>
hi link UniteCursorLine CursorLine
hi UniteCursorLine cterm=NONE ctermbg=darkblue ctermfg=white guibg=darkblue guifg=white

if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

call unite#filters#matcher_default#use(['matcher_fuzzy'])

call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
\   'ignore_pattern', join([
\   '\.git/',
\   'node_modules/',
\   'vendor/',
\ ], '\|'))

call unite#custom#profile('default', 'context', {
\   'marked_icon': 'âœ“',
\   'start_insert': 1,
\   'winheight': 10,
\   'direction': 'botright',
\   'cursor_line_highlight': 'UniteCursorLine'
\ })

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" NERDTree
nnoremap <C-K><C-B> :NERDTreeToggle<CR>
inoremap <C-K><C-B> <Esc>:NERDTreeToggle<CR>

" NERDCommenter
nmap <C-C><C-C> <leader>c<space>
imap <C-C><C-C> <Esc><leader>c<space>
vmap <C-C><C-C> <leader>c<space>

" NEOComplete
let g:neocomplete#enable_at_startup = 1

" vim-fugitive
nnoremap <C-G><C-S> :Gstatus<CR>
inoremap <C-G><C-S> <Esc>:Gstatus<CR>

" vim-rubytest
nmap <C-C><C-T> <Plug>RubyFileRun
imap <C-C><C-T> <Esc><Plug>RubyFileRun
nmap <C-C><C-R> <Plug>RubyTestRunLast
imap <C-C><C-R> <Esc><Plug>RubyTestRunLast
let g:rubytest_in_quickfix = 1

" --------------------------
" Keybindings
" --------------------------
nnoremap <C-C><Right>     :bnext<CR>
inoremap <C-C><Right>     <Esc>:bnext<CR>
nnoremap <C-C><Left>     :bprevious<CR>
inoremap <C-C><Left>     <Esc>:bprevious<CR>
nnoremap <C-c><C-s>     :w<CR>
inoremap <C-c><C-s>     <Esc>:w<CR>
nnoremap <C-c><C-q>     :qa<CR>
inoremap <C-c><C-q>    <Esc>:qa<CR>
nnoremap <C-c><C-w>     :bd<CR>
inoremap <C-c><C-w>     <Esc>:bd<CR>
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l
imap <C-j> <Esc><C-W>j
imap <C-k> <Esc><C-W>k
imap <C-h> <Esc><C-W>h
imap <C-l> <Esc><C-W>l

" --------------------------
" Other options
" --------------------------
" Encoding
set encoding=utf-8
" Display statusbar
set laststatus=2
" Set colors to 256
set t_Co=256
" Show line numbers
set number
" Syntax highlighting
syntax on
" Tab width
set tabstop=4 shiftwidth=4 expandtab
" Cursor line
" set cursorline
" hi CursorLine cterm=underline
" Line Length limiter
" set Search results highlight
hi Search cterm=NONE ctermbg=NONE guibg=NONE
set colorcolumn=120
hi ColorColumn ctermbg=darkgrey ctermfg=white guibg=darkgrey guifg=white
" Allow to switch buffer without saving
set hidden
" Trim trailing whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e
" Fix terminal
silent !stty -ixon > /dev/null 2>/dev/null

set backspace=indent,eol,start
